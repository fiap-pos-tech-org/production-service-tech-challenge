name: Deploy

on:
  pull_request:
    types: closed
    branches: main

env:
  EKS_CLUSTER: tech-challenge-38
  PROJECT_KEY: fiap-pos-tech-org_production-service-tech-challenge

jobs:
  sonar-analysis:
    if: |
      github.event.pull_request.merged &&
      github.ref == 'refs/heads/main'
    name: Sonar Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        run: make sonar-analysis SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check SonarCloud coverage
        run: |
          COVERAGE=$(curl -sSf "https://sonarcloud.io/api/measures/component?component=$PROJECT_KEY&metricKeys=coverage" | jq -r '.component.measures[0].value')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Cobertura de teste abaixo de 80%"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to EKS cluster
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ vars.AWS_REGION }}

      - name: Login to DockerHub
        run: docker login -u geter -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t geter/production-techchallenge38:latest .
          docker push geter/production-techchallenge38

      - name: Deploy EKS
        uses: swdotcom/update-and-apply-kubernetes-configs@v1.3
        with:
          k8-config-file-paths: |
            deployment/alb-ingress.yaml
            deployment/production-deployment.yaml
            deployment/production-service.yaml
            deployment/production-serviceaccount.yaml
          replacement-method: defined
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          TOPICO_PRODUCAO_ARN: ${{ vars.TOPICO_PRODUCAO_ARN }}
          FILA_PRODUCAO: ${{ vars.FILA_PRODUCAO }}
          GROUP_ID: ${{ vars.GROUP_ID }}
          ENV: ${{ vars.ENV }}